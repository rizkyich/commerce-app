// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String
  role      Role     @default(USER)
  cart      Cart?
  Order     Order[]
  Review    Review[]
}

model Order {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  status    StatusOrder @default(PENDING)
  items     OrderItem[]
  payments  Payment[]

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  price     Int
  orderId   String
  productId String
  cartId    String?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  cart    Cart?   @relation(fields: [cartId], references: [id])
}

model Product {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  imageUrl    String
  price       Int
  quantity    Int
  reviews     Review[]

  // relationship product with categories (many-to-many)
  CategoriesOnProducts CategoriesToProducts[]
  OrderItem            OrderItem[]
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  imageUrl  String

  // relationship categories with products (many-to-many)
  CategoriesOnProducts CategoriesToProducts[]
}

model CategoriesToProducts {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Cart {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String      @unique
  items     OrderItem[]

  user User @relation(fields: [userId], references: [id])
}

model Payment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    PaymentStatus @default(PENDING)
  method    String

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  productId String
  Product   Product @relation(fields: [productId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum StatusOrder {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
